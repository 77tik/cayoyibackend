// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: master.proto

package master_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Weedfilesys_SendHeartbeat_FullMethodName          = "/master_pb.Weedfilesys/SendHeartbeat"
	Weedfilesys_KeepConnected_FullMethodName          = "/master_pb.Weedfilesys/KeepConnected"
	Weedfilesys_LookupVolume_FullMethodName           = "/master_pb.Weedfilesys/LookupVolume"
	Weedfilesys_Assign_FullMethodName                 = "/master_pb.Weedfilesys/Assign"
	Weedfilesys_StreamAssign_FullMethodName           = "/master_pb.Weedfilesys/StreamAssign"
	Weedfilesys_Statistics_FullMethodName             = "/master_pb.Weedfilesys/Statistics"
	Weedfilesys_CollectionList_FullMethodName         = "/master_pb.Weedfilesys/CollectionList"
	Weedfilesys_CollectionDelete_FullMethodName       = "/master_pb.Weedfilesys/CollectionDelete"
	Weedfilesys_VolumeList_FullMethodName             = "/master_pb.Weedfilesys/VolumeList"
	Weedfilesys_LookupEcVolume_FullMethodName         = "/master_pb.Weedfilesys/LookupEcVolume"
	Weedfilesys_VacuumVolume_FullMethodName           = "/master_pb.Weedfilesys/VacuumVolume"
	Weedfilesys_DisableVacuum_FullMethodName          = "/master_pb.Weedfilesys/DisableVacuum"
	Weedfilesys_EnableVacuum_FullMethodName           = "/master_pb.Weedfilesys/EnableVacuum"
	Weedfilesys_VolumeMarkReadonly_FullMethodName     = "/master_pb.Weedfilesys/VolumeMarkReadonly"
	Weedfilesys_GetMasterConfiguration_FullMethodName = "/master_pb.Weedfilesys/GetMasterConfiguration"
	Weedfilesys_ListClusterNodes_FullMethodName       = "/master_pb.Weedfilesys/ListClusterNodes"
	Weedfilesys_LeaseAdminToken_FullMethodName        = "/master_pb.Weedfilesys/LeaseAdminToken"
	Weedfilesys_ReleaseAdminToken_FullMethodName      = "/master_pb.Weedfilesys/ReleaseAdminToken"
	Weedfilesys_Ping_FullMethodName                   = "/master_pb.Weedfilesys/Ping"
	Weedfilesys_RaftListClusterServers_FullMethodName = "/master_pb.Weedfilesys/RaftListClusterServers"
	Weedfilesys_RaftAddServer_FullMethodName          = "/master_pb.Weedfilesys/RaftAddServer"
	Weedfilesys_RaftRemoveServer_FullMethodName       = "/master_pb.Weedfilesys/RaftRemoveServer"
	Weedfilesys_VolumeGrow_FullMethodName             = "/master_pb.Weedfilesys/VolumeGrow"
)

// WeedfilesysClient is the client API for Weedfilesys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeedfilesysClient interface {
	// 卷服务器 向主服务器定期发送心跳信息，主服务器返回配置信息
	SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Heartbeat, HeartbeatResponse], error)
	// 长连接维护接口，Filer 等组件通过它与 Master 保持连接，接收节点变化（例如新增/删除 Filer 节点
	KeepConnected(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[KeepConnectedRequest, KeepConnectedResponse], error)
	// 查找某个 volume ID 或 file ID 所在的位置（用于客户端上传/下载文件时定位）
	LookupVolume(ctx context.Context, in *LookupVolumeRequest, opts ...grpc.CallOption) (*LookupVolumeResponse, error)
	// 客户端上传前请求分配一个可写文件 ID（fid）及对应卷的位置。一次性分配
	Assign(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*AssignResponse, error)
	// 流式分配多个文件 ID（比普通 assign 高效）
	StreamAssign(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AssignRequest, AssignResponse], error)
	// 查询某种 replication / collection 的统计数据（总大小、文件数量）
	Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error)
	// 查询逻辑卷
	CollectionList(ctx context.Context, in *CollectionListRequest, opts ...grpc.CallOption) (*CollectionListResponse, error)
	// 删除逻辑卷
	CollectionDelete(ctx context.Context, in *CollectionDeleteRequest, opts ...grpc.CallOption) (*CollectionDeleteResponse, error)
	// 获取整个集群拓扑结构（data center → rack → node → disk → volume）
	VolumeList(ctx context.Context, in *VolumeListRequest, opts ...grpc.CallOption) (*VolumeListResponse, error)
	// 查找 EC volume 的 shard 信息和位置
	LookupEcVolume(ctx context.Context, in *LookupEcVolumeRequest, opts ...grpc.CallOption) (*LookupEcVolumeResponse, error)
	// 触发对某个 volume 的垃圾清理（compact
	VacuumVolume(ctx context.Context, in *VacuumVolumeRequest, opts ...grpc.CallOption) (*VacuumVolumeResponse, error)
	// 关闭自动 vacuum 功能（垃圾清理）
	DisableVacuum(ctx context.Context, in *DisableVacuumRequest, opts ...grpc.CallOption) (*DisableVacuumResponse, error)
	// 开启自动 vacuum 功能（垃圾清理）
	EnableVacuum(ctx context.Context, in *EnableVacuumRequest, opts ...grpc.CallOption) (*EnableVacuumResponse, error)
	// 将某个 volume 标记为只读（维护/降级）
	VolumeMarkReadonly(ctx context.Context, in *VolumeMarkReadonlyRequest, opts ...grpc.CallOption) (*VolumeMarkReadonlyResponse, error)
	// 获取主服务器的配置信息
	GetMasterConfiguration(ctx context.Context, in *GetMasterConfigurationRequest, opts ...grpc.CallOption) (*GetMasterConfigurationResponse, error)
	// 获取当前连接的 filer 或 volume 节点信息
	ListClusterNodes(ctx context.Context, in *ListClusterNodesRequest, opts ...grpc.CallOption) (*ListClusterNodesResponse, error)
	// 用于某些需要互斥访问的场景下的租约控制（admin 功能）
	LeaseAdminToken(ctx context.Context, in *LeaseAdminTokenRequest, opts ...grpc.CallOption) (*LeaseAdminTokenResponse, error)
	ReleaseAdminToken(ctx context.Context, in *ReleaseAdminTokenRequest, opts ...grpc.CallOption) (*ReleaseAdminTokenResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// 查看当前master raft集群成员列表
	RaftListClusterServers(ctx context.Context, in *RaftListClusterServersRequest, opts ...grpc.CallOption) (*RaftListClusterServersResponse, error)
	// 添加一个raft成员节点（比如新master节点）
	RaftAddServer(ctx context.Context, in *RaftAddServerRequest, opts ...grpc.CallOption) (*RaftAddServerResponse, error)
	// 删除一个raft节点
	RaftRemoveServer(ctx context.Context, in *RaftRemoveServerRequest, opts ...grpc.CallOption) (*RaftRemoveServerResponse, error)
	// 让 Master 新增 Volume（实际由 Master 控制调度，通知某个 Volume Server 创建）
	VolumeGrow(ctx context.Context, in *VolumeGrowRequest, opts ...grpc.CallOption) (*VolumeGrowResponse, error)
}

type weedfilesysClient struct {
	cc grpc.ClientConnInterface
}

func NewWeedfilesysClient(cc grpc.ClientConnInterface) WeedfilesysClient {
	return &weedfilesysClient{cc}
}

func (c *weedfilesysClient) SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Heartbeat, HeartbeatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Weedfilesys_ServiceDesc.Streams[0], Weedfilesys_SendHeartbeat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Heartbeat, HeartbeatResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Weedfilesys_SendHeartbeatClient = grpc.BidiStreamingClient[Heartbeat, HeartbeatResponse]

func (c *weedfilesysClient) KeepConnected(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[KeepConnectedRequest, KeepConnectedResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Weedfilesys_ServiceDesc.Streams[1], Weedfilesys_KeepConnected_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[KeepConnectedRequest, KeepConnectedResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Weedfilesys_KeepConnectedClient = grpc.BidiStreamingClient[KeepConnectedRequest, KeepConnectedResponse]

func (c *weedfilesysClient) LookupVolume(ctx context.Context, in *LookupVolumeRequest, opts ...grpc.CallOption) (*LookupVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupVolumeResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_LookupVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) Assign(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*AssignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_Assign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) StreamAssign(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AssignRequest, AssignResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Weedfilesys_ServiceDesc.Streams[2], Weedfilesys_StreamAssign_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AssignRequest, AssignResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Weedfilesys_StreamAssignClient = grpc.BidiStreamingClient[AssignRequest, AssignResponse]

func (c *weedfilesysClient) Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatisticsResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_Statistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) CollectionList(ctx context.Context, in *CollectionListRequest, opts ...grpc.CallOption) (*CollectionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionListResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_CollectionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) CollectionDelete(ctx context.Context, in *CollectionDeleteRequest, opts ...grpc.CallOption) (*CollectionDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionDeleteResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_CollectionDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) VolumeList(ctx context.Context, in *VolumeListRequest, opts ...grpc.CallOption) (*VolumeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeListResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_VolumeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) LookupEcVolume(ctx context.Context, in *LookupEcVolumeRequest, opts ...grpc.CallOption) (*LookupEcVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupEcVolumeResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_LookupEcVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) VacuumVolume(ctx context.Context, in *VacuumVolumeRequest, opts ...grpc.CallOption) (*VacuumVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VacuumVolumeResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_VacuumVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) DisableVacuum(ctx context.Context, in *DisableVacuumRequest, opts ...grpc.CallOption) (*DisableVacuumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableVacuumResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_DisableVacuum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) EnableVacuum(ctx context.Context, in *EnableVacuumRequest, opts ...grpc.CallOption) (*EnableVacuumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableVacuumResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_EnableVacuum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) VolumeMarkReadonly(ctx context.Context, in *VolumeMarkReadonlyRequest, opts ...grpc.CallOption) (*VolumeMarkReadonlyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeMarkReadonlyResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_VolumeMarkReadonly_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) GetMasterConfiguration(ctx context.Context, in *GetMasterConfigurationRequest, opts ...grpc.CallOption) (*GetMasterConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMasterConfigurationResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_GetMasterConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) ListClusterNodes(ctx context.Context, in *ListClusterNodesRequest, opts ...grpc.CallOption) (*ListClusterNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClusterNodesResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_ListClusterNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) LeaseAdminToken(ctx context.Context, in *LeaseAdminTokenRequest, opts ...grpc.CallOption) (*LeaseAdminTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaseAdminTokenResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_LeaseAdminToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) ReleaseAdminToken(ctx context.Context, in *ReleaseAdminTokenRequest, opts ...grpc.CallOption) (*ReleaseAdminTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseAdminTokenResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_ReleaseAdminToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) RaftListClusterServers(ctx context.Context, in *RaftListClusterServersRequest, opts ...grpc.CallOption) (*RaftListClusterServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RaftListClusterServersResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_RaftListClusterServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) RaftAddServer(ctx context.Context, in *RaftAddServerRequest, opts ...grpc.CallOption) (*RaftAddServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RaftAddServerResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_RaftAddServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) RaftRemoveServer(ctx context.Context, in *RaftRemoveServerRequest, opts ...grpc.CallOption) (*RaftRemoveServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RaftRemoveServerResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_RaftRemoveServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weedfilesysClient) VolumeGrow(ctx context.Context, in *VolumeGrowRequest, opts ...grpc.CallOption) (*VolumeGrowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeGrowResponse)
	err := c.cc.Invoke(ctx, Weedfilesys_VolumeGrow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeedfilesysServer is the server API for Weedfilesys service.
// All implementations must embed UnimplementedWeedfilesysServer
// for forward compatibility.
type WeedfilesysServer interface {
	// 卷服务器 向主服务器定期发送心跳信息，主服务器返回配置信息
	SendHeartbeat(grpc.BidiStreamingServer[Heartbeat, HeartbeatResponse]) error
	// 长连接维护接口，Filer 等组件通过它与 Master 保持连接，接收节点变化（例如新增/删除 Filer 节点
	KeepConnected(grpc.BidiStreamingServer[KeepConnectedRequest, KeepConnectedResponse]) error
	// 查找某个 volume ID 或 file ID 所在的位置（用于客户端上传/下载文件时定位）
	LookupVolume(context.Context, *LookupVolumeRequest) (*LookupVolumeResponse, error)
	// 客户端上传前请求分配一个可写文件 ID（fid）及对应卷的位置。一次性分配
	Assign(context.Context, *AssignRequest) (*AssignResponse, error)
	// 流式分配多个文件 ID（比普通 assign 高效）
	StreamAssign(grpc.BidiStreamingServer[AssignRequest, AssignResponse]) error
	// 查询某种 replication / collection 的统计数据（总大小、文件数量）
	Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error)
	// 查询逻辑卷
	CollectionList(context.Context, *CollectionListRequest) (*CollectionListResponse, error)
	// 删除逻辑卷
	CollectionDelete(context.Context, *CollectionDeleteRequest) (*CollectionDeleteResponse, error)
	// 获取整个集群拓扑结构（data center → rack → node → disk → volume）
	VolumeList(context.Context, *VolumeListRequest) (*VolumeListResponse, error)
	// 查找 EC volume 的 shard 信息和位置
	LookupEcVolume(context.Context, *LookupEcVolumeRequest) (*LookupEcVolumeResponse, error)
	// 触发对某个 volume 的垃圾清理（compact
	VacuumVolume(context.Context, *VacuumVolumeRequest) (*VacuumVolumeResponse, error)
	// 关闭自动 vacuum 功能（垃圾清理）
	DisableVacuum(context.Context, *DisableVacuumRequest) (*DisableVacuumResponse, error)
	// 开启自动 vacuum 功能（垃圾清理）
	EnableVacuum(context.Context, *EnableVacuumRequest) (*EnableVacuumResponse, error)
	// 将某个 volume 标记为只读（维护/降级）
	VolumeMarkReadonly(context.Context, *VolumeMarkReadonlyRequest) (*VolumeMarkReadonlyResponse, error)
	// 获取主服务器的配置信息
	GetMasterConfiguration(context.Context, *GetMasterConfigurationRequest) (*GetMasterConfigurationResponse, error)
	// 获取当前连接的 filer 或 volume 节点信息
	ListClusterNodes(context.Context, *ListClusterNodesRequest) (*ListClusterNodesResponse, error)
	// 用于某些需要互斥访问的场景下的租约控制（admin 功能）
	LeaseAdminToken(context.Context, *LeaseAdminTokenRequest) (*LeaseAdminTokenResponse, error)
	ReleaseAdminToken(context.Context, *ReleaseAdminTokenRequest) (*ReleaseAdminTokenResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// 查看当前master raft集群成员列表
	RaftListClusterServers(context.Context, *RaftListClusterServersRequest) (*RaftListClusterServersResponse, error)
	// 添加一个raft成员节点（比如新master节点）
	RaftAddServer(context.Context, *RaftAddServerRequest) (*RaftAddServerResponse, error)
	// 删除一个raft节点
	RaftRemoveServer(context.Context, *RaftRemoveServerRequest) (*RaftRemoveServerResponse, error)
	// 让 Master 新增 Volume（实际由 Master 控制调度，通知某个 Volume Server 创建）
	VolumeGrow(context.Context, *VolumeGrowRequest) (*VolumeGrowResponse, error)
	mustEmbedUnimplementedWeedfilesysServer()
}

// UnimplementedWeedfilesysServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWeedfilesysServer struct{}

func (UnimplementedWeedfilesysServer) SendHeartbeat(grpc.BidiStreamingServer[Heartbeat, HeartbeatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}
func (UnimplementedWeedfilesysServer) KeepConnected(grpc.BidiStreamingServer[KeepConnectedRequest, KeepConnectedResponse]) error {
	return status.Errorf(codes.Unimplemented, "method KeepConnected not implemented")
}
func (UnimplementedWeedfilesysServer) LookupVolume(context.Context, *LookupVolumeRequest) (*LookupVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupVolume not implemented")
}
func (UnimplementedWeedfilesysServer) Assign(context.Context, *AssignRequest) (*AssignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assign not implemented")
}
func (UnimplementedWeedfilesysServer) StreamAssign(grpc.BidiStreamingServer[AssignRequest, AssignResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAssign not implemented")
}
func (UnimplementedWeedfilesysServer) Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statistics not implemented")
}
func (UnimplementedWeedfilesysServer) CollectionList(context.Context, *CollectionListRequest) (*CollectionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionList not implemented")
}
func (UnimplementedWeedfilesysServer) CollectionDelete(context.Context, *CollectionDeleteRequest) (*CollectionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionDelete not implemented")
}
func (UnimplementedWeedfilesysServer) VolumeList(context.Context, *VolumeListRequest) (*VolumeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeList not implemented")
}
func (UnimplementedWeedfilesysServer) LookupEcVolume(context.Context, *LookupEcVolumeRequest) (*LookupEcVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupEcVolume not implemented")
}
func (UnimplementedWeedfilesysServer) VacuumVolume(context.Context, *VacuumVolumeRequest) (*VacuumVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VacuumVolume not implemented")
}
func (UnimplementedWeedfilesysServer) DisableVacuum(context.Context, *DisableVacuumRequest) (*DisableVacuumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableVacuum not implemented")
}
func (UnimplementedWeedfilesysServer) EnableVacuum(context.Context, *EnableVacuumRequest) (*EnableVacuumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableVacuum not implemented")
}
func (UnimplementedWeedfilesysServer) VolumeMarkReadonly(context.Context, *VolumeMarkReadonlyRequest) (*VolumeMarkReadonlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeMarkReadonly not implemented")
}
func (UnimplementedWeedfilesysServer) GetMasterConfiguration(context.Context, *GetMasterConfigurationRequest) (*GetMasterConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterConfiguration not implemented")
}
func (UnimplementedWeedfilesysServer) ListClusterNodes(context.Context, *ListClusterNodesRequest) (*ListClusterNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterNodes not implemented")
}
func (UnimplementedWeedfilesysServer) LeaseAdminToken(context.Context, *LeaseAdminTokenRequest) (*LeaseAdminTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseAdminToken not implemented")
}
func (UnimplementedWeedfilesysServer) ReleaseAdminToken(context.Context, *ReleaseAdminTokenRequest) (*ReleaseAdminTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseAdminToken not implemented")
}
func (UnimplementedWeedfilesysServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWeedfilesysServer) RaftListClusterServers(context.Context, *RaftListClusterServersRequest) (*RaftListClusterServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftListClusterServers not implemented")
}
func (UnimplementedWeedfilesysServer) RaftAddServer(context.Context, *RaftAddServerRequest) (*RaftAddServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftAddServer not implemented")
}
func (UnimplementedWeedfilesysServer) RaftRemoveServer(context.Context, *RaftRemoveServerRequest) (*RaftRemoveServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftRemoveServer not implemented")
}
func (UnimplementedWeedfilesysServer) VolumeGrow(context.Context, *VolumeGrowRequest) (*VolumeGrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeGrow not implemented")
}
func (UnimplementedWeedfilesysServer) mustEmbedUnimplementedWeedfilesysServer() {}
func (UnimplementedWeedfilesysServer) testEmbeddedByValue()                     {}

// UnsafeWeedfilesysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeedfilesysServer will
// result in compilation errors.
type UnsafeWeedfilesysServer interface {
	mustEmbedUnimplementedWeedfilesysServer()
}

func RegisterWeedfilesysServer(s grpc.ServiceRegistrar, srv WeedfilesysServer) {
	// If the following call pancis, it indicates UnimplementedWeedfilesysServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Weedfilesys_ServiceDesc, srv)
}

func _Weedfilesys_SendHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WeedfilesysServer).SendHeartbeat(&grpc.GenericServerStream[Heartbeat, HeartbeatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Weedfilesys_SendHeartbeatServer = grpc.BidiStreamingServer[Heartbeat, HeartbeatResponse]

func _Weedfilesys_KeepConnected_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WeedfilesysServer).KeepConnected(&grpc.GenericServerStream[KeepConnectedRequest, KeepConnectedResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Weedfilesys_KeepConnectedServer = grpc.BidiStreamingServer[KeepConnectedRequest, KeepConnectedResponse]

func _Weedfilesys_LookupVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).LookupVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_LookupVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).LookupVolume(ctx, req.(*LookupVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_Assign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).Assign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_Assign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).Assign(ctx, req.(*AssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_StreamAssign_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WeedfilesysServer).StreamAssign(&grpc.GenericServerStream[AssignRequest, AssignResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Weedfilesys_StreamAssignServer = grpc.BidiStreamingServer[AssignRequest, AssignResponse]

func _Weedfilesys_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_Statistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).Statistics(ctx, req.(*StatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_CollectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).CollectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_CollectionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).CollectionList(ctx, req.(*CollectionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_CollectionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).CollectionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_CollectionDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).CollectionDelete(ctx, req.(*CollectionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_VolumeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).VolumeList(ctx, req.(*VolumeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_LookupEcVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupEcVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).LookupEcVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_LookupEcVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).LookupEcVolume(ctx, req.(*LookupEcVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_VacuumVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacuumVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).VacuumVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_VacuumVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).VacuumVolume(ctx, req.(*VacuumVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_DisableVacuum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableVacuumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).DisableVacuum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_DisableVacuum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).DisableVacuum(ctx, req.(*DisableVacuumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_EnableVacuum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableVacuumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).EnableVacuum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_EnableVacuum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).EnableVacuum(ctx, req.(*EnableVacuumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_VolumeMarkReadonly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeMarkReadonlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).VolumeMarkReadonly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_VolumeMarkReadonly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).VolumeMarkReadonly(ctx, req.(*VolumeMarkReadonlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_GetMasterConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).GetMasterConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_GetMasterConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).GetMasterConfiguration(ctx, req.(*GetMasterConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_ListClusterNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).ListClusterNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_ListClusterNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).ListClusterNodes(ctx, req.(*ListClusterNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_LeaseAdminToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseAdminTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).LeaseAdminToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_LeaseAdminToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).LeaseAdminToken(ctx, req.(*LeaseAdminTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_ReleaseAdminToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseAdminTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).ReleaseAdminToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_ReleaseAdminToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).ReleaseAdminToken(ctx, req.(*ReleaseAdminTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_RaftListClusterServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftListClusterServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).RaftListClusterServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_RaftListClusterServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).RaftListClusterServers(ctx, req.(*RaftListClusterServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_RaftAddServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftAddServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).RaftAddServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_RaftAddServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).RaftAddServer(ctx, req.(*RaftAddServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_RaftRemoveServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftRemoveServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).RaftRemoveServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_RaftRemoveServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).RaftRemoveServer(ctx, req.(*RaftRemoveServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weedfilesys_VolumeGrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeGrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeedfilesysServer).VolumeGrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Weedfilesys_VolumeGrow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeedfilesysServer).VolumeGrow(ctx, req.(*VolumeGrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Weedfilesys_ServiceDesc is the grpc.ServiceDesc for Weedfilesys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Weedfilesys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master_pb.Weedfilesys",
	HandlerType: (*WeedfilesysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupVolume",
			Handler:    _Weedfilesys_LookupVolume_Handler,
		},
		{
			MethodName: "Assign",
			Handler:    _Weedfilesys_Assign_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _Weedfilesys_Statistics_Handler,
		},
		{
			MethodName: "CollectionList",
			Handler:    _Weedfilesys_CollectionList_Handler,
		},
		{
			MethodName: "CollectionDelete",
			Handler:    _Weedfilesys_CollectionDelete_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _Weedfilesys_VolumeList_Handler,
		},
		{
			MethodName: "LookupEcVolume",
			Handler:    _Weedfilesys_LookupEcVolume_Handler,
		},
		{
			MethodName: "VacuumVolume",
			Handler:    _Weedfilesys_VacuumVolume_Handler,
		},
		{
			MethodName: "DisableVacuum",
			Handler:    _Weedfilesys_DisableVacuum_Handler,
		},
		{
			MethodName: "EnableVacuum",
			Handler:    _Weedfilesys_EnableVacuum_Handler,
		},
		{
			MethodName: "VolumeMarkReadonly",
			Handler:    _Weedfilesys_VolumeMarkReadonly_Handler,
		},
		{
			MethodName: "GetMasterConfiguration",
			Handler:    _Weedfilesys_GetMasterConfiguration_Handler,
		},
		{
			MethodName: "ListClusterNodes",
			Handler:    _Weedfilesys_ListClusterNodes_Handler,
		},
		{
			MethodName: "LeaseAdminToken",
			Handler:    _Weedfilesys_LeaseAdminToken_Handler,
		},
		{
			MethodName: "ReleaseAdminToken",
			Handler:    _Weedfilesys_ReleaseAdminToken_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Weedfilesys_Ping_Handler,
		},
		{
			MethodName: "RaftListClusterServers",
			Handler:    _Weedfilesys_RaftListClusterServers_Handler,
		},
		{
			MethodName: "RaftAddServer",
			Handler:    _Weedfilesys_RaftAddServer_Handler,
		},
		{
			MethodName: "RaftRemoveServer",
			Handler:    _Weedfilesys_RaftRemoveServer_Handler,
		},
		{
			MethodName: "VolumeGrow",
			Handler:    _Weedfilesys_VolumeGrow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendHeartbeat",
			Handler:       _Weedfilesys_SendHeartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "KeepConnected",
			Handler:       _Weedfilesys_KeepConnected_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamAssign",
			Handler:       _Weedfilesys_StreamAssign_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "master.proto",
}
